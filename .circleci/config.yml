version: 2.1
orbs:
  slack: circleci/slack@4.4.2
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Deleting Stacks: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string       
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS = curl -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request GET https://api.memstash.io/values/migration_<<parameters.workflow_id>>
            if(( $SUCCESS==1 )); 
            then
            cd  ~/project/backend
            npm i
            npm run migration:revert
              exit 1
            fi           
jobs:
  install-backend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules


  install-frontend-dependencies:
   docker:
      - image: circleci/node:13.8.0
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
           echo "building frontend"
           pwd
           npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: << pipeline.id >>-frontend-build
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .         
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
           echo "building backend"
           pwd
           npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: << pipeline.id >>-backend-build
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1   
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist
         

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: test front-end
          working_directory: ./frontend
          command: |
           pwd
           echo "testing frontend"
           npm run test
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1                           
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: test Back-end
          working_directory: ./backend          
          command: |
           pwd
           echo "testing backend"
           npm run test           
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: scan front-end
          command: |
           cd frontend
           echo "audit frontend"
           npm install
           npm audit fix --audit-level=critical
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1           
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: scan Back-end
          command: |
           cd backend
           echo "audit backend"
           npm install
           npm audit fix --audit-level=critical
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1  

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_GET_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "[all]" >> .circleci/ansible/inventory.txt
            echo "$BACKEND_GET_IP" >> .circleci/ansible/inventory.txt
            echo "------inventory contents------"
            cat .circleci/ansible/inventory.txt
      - run:
          name: Programmatically save the new back-end url 
          command: |
            host=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend" \
              --output text)
            echo "${host}"
            curl --write-out "%{http_code}\n" -H "Content-Type: text/plain" -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request PUT --data "http://$host:3030" https://api.memstash.io/values/udapeople-backend-url      
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f6:35:9d:5c:15:81:f8:b2:c4:85:a1:da:81:36:36:ce"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
           apk add --update curl nodejs npm ansible zip
           pip install awscli 
      - run:
          name: Configure server
          command: |
            echo "------inventory contents------"
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:      
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run premigrations
            npm run migrations >> migration.txt
            cat migration.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully." migration.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     
      - destroy-environment:      
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"          

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_GET_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-f4d6334" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_GET_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build   
            cd dist
            aws s3 cp . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo "Done"      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f6:35:9d:5c:15:81:f8:b2:c4:85:a1:da:81:36:36:ce"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm audit fix
            npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy to EC2
          command:
            cd backend/dist
            cp ../package.json .
            zip -rq dist.zip *
            mkdir -p .circleci/.ansible/roles/deploy/files/
            mv dist.zip .circleci/.ansible/roles/deploy/files/
            ansible-playbook -i inventory.txt .circleci/.ansible/deploy-backend.yml
            echo "Done"  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: .        
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export API_URL=$(curl -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request GET https://api.memstash.io/values/udapeople-backend-url)
            echo "${API_URL}"          
            curl -s $API_URL/api/status            
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s http://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-1.amazonaws.com/index.html | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
       

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            
      - run:
          name: Update cloudfront distribution
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`UdapeopleWorkflowID\`].Value" \
              --no-paginate --output text)
            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            printf '%s\n' "${STACKS[@]}"
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/cloudfront_infrastructure.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-cloudfront
      - persist_to_workspace:
          root: ~/
          paths:
            - project/cloudfront
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
       
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            
            if printf '%s\n' "${STACKS[@]}" | grep -q "$OLD_WORKFLOW_ID"; then
              echo "Removing previous stack"
              aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            fi  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"       

workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-backend:
          requires:
            - install-backend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

