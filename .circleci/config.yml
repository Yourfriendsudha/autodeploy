version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string    
    steps:
      - run:
          name: Destroy backend Infra
          when: on_fail          
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
      - run:
          name: Destroy frontend Infra
          when: on_fail          
          command: |
            aws s3 rb s3://udapeople-<< parameters.id >> --force           
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: 4f000549-cc4c-493a-af35-aefc582cfcb2" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
             cd backend
             npm install
             npm run migrations:revert
             echo "Migration reverted"
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - run:
          name: Build front-end
          command: |
           cd frontend
           echo "building frontend"
           npm install
           npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: << pipeline.id >>-frontend-build
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .         
      - run:
          name: Back-end build
          command: |
           cd backend
           echo "building backend"
           npm install
           npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: << pipeline.id >>-backend-build
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1          

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: test front-end
          command: |
           cd frontend
           echo "testing frontend"
           npm run test
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1                           
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: test Back-end
          command: |
           cd backend
           echo "testing backend"
           npm run test           
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: scan front-end
          command: |
           cd frontend
           echo "audit frontend"
           npm install
           npm audit fix --audit-level=critical
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1           
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: scan Back-end
          command: |
           cd backend
           echo "audit backend"
           npm install
           npm audit fix --audit-level=critical
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1           
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            echo "deploy backend infra"
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udaPeople-backend-Superpower-${CIRCLE_WORKFLOW_ID} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" 
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            echo "deploy frontend infra"
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udaPeople-frontend-Superpower-${CIRCLE_WORKFLOW_ID} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
            aws s3api list-buckets --query "Buckets[].Name"   
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "build inventory file"
            cd ./.circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udaPeople-backend-Superpower-${CIRCLE_WORKFLOW_ID}" \
              --output text >> inventory.txt
            cat inventory.txt
            pwd
      - run:
          name: Programmatically save the new back-end url 
          command: |
            host=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udaPeople-backend-Superpower-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            curl --write-out "%{http_code}\n" -H "Content-Type: text/plain" -H "token: 4f000549-cc4c-493a-af35-aefc582cfcb2" --request PUT --data "http://$host:3030" https://api.memstash.io/values/udaPeople-backend-url
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt                  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail  

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c8:16:7a:e1:45:5a:43:b0:a5:3a:7a:13:e4:a2:06:19"]
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            cd ./.circleci/ansible
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            cd ./.circleci/ansible
            export ansible_host_key_checking= false
            pwd
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .  
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]              
      - run:
          name: Run migrations
          command: |
            cd backend
            echo "Run migrations" 
            npm run premigrations         
            npm run migrations > migration_status
            cat migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "RUN migration success"
              curl --write-out -H "Content-Type: text/plain" -H "token: 4f000549-cc4c-493a-af35-aefc582cfcb2" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "RUN migration failure"
              curl --write-out -H "Content-Type: text/plain" -H "token: 4f000549-cc4c-493a-af35-aefc582cfcb2" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID}" 
          when: on_fail 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail                        

  deploy-frontend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - attach_workspace:
          at: .circleci/ansible/      
      - run:
          name: Install dependencies
          command: |
            apk add --update curl npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export API_URL=$(curl -H "token: 4f000549-cc4c-493a-af35-aefc582cfcb2" --request GET https://api.memstash.io/values/udaPeople-backend-url)
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build   
            cd dist
            ls -lrt| wc -l
            aws s3 cp . s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
            echo "deployed frontend"  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail   
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID}" 
          when: on_fail     

  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c8:16:7a:e1:45:5a:43:b0:a5:3a:7a:13:e4:a2:06:19"]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd ./.circleci/ansible
            pwd
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail    
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID}" 
          when: on_fail     

  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export API_URL=$(curl -H "token: 4f000549-cc4c-493a-af35-aefc582cfcb2" --request GET https://api.memstash.io/values/udaPeople-backend-url)
            echo "${API_URL}/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            export UI_URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.us-west-2.amazonaws.com/index.html"
            echo "${UI_URL}"
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID}" 
          when: on_fail 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail    
          
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -

      - run:
          name: Store old WorkflowID in memstash for cleanup phase
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: 4f000549-cc4c-493a-af35-aefc582cfcb2" --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udaPeople-cloudfront-Superpower-${CIRCLE_WORKFLOW_ID} \
              --stack-name "udaPeople-cloudfront-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"   
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID}" 
          when: on_fail 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail    
          

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            GreenWorkflowID=$(curl -H "token: 4f000549-cc4c-493a-af35-aefc582cfcb2" --request GET https://api.memstash.io/values/WorkflowID)
            BlueWorkflowID=${CIRCLE_WORKFLOW_ID}
            echo GreenWorkflowID
            echo BlueWorkflowID
            if [[ "$BlueWorkflowID" != "$GreenWorkflowID" ]]
            then
              aws s3 rm "s3://udapeople-${GreenWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${GreenWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${GreenWorkflowID}"
            else
              echo cleanup not required
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      #- scan-backend:
          #requires: [build-backend]
      #- scan-frontend:
          #requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]