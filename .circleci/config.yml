version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string    
    steps:
      - run:
          name: Destroy backend Infra
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-ss1j287dhjppmz1593
          when: on_fail
      - run:
          name: Destroy frontend Infra
          command: |
            aws s3 rm s3://udapeople-ss1j287dhjppmz1593 --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-ss1j287dhjppmz1593
          when: on_fail

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - run:
          name: Build front-end
          command: |
           cd frontend
           echo "building frontend"
           npm install
           npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: << pipeline.id >>-frontend-build
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .         
      - run:
          name: Back-end build
          command: |
           cd backend
           echo "building backend"
           npm install
           npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: << pipeline.id >>-backend-build
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1          

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: test front-end
          command: |
           cd frontend
           echo "testing frontend"
           npm run test
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1                           
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: test Back-end
          command: |
           cd backend
           echo "testing backend"
           npm run test           
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: scan front-end
          command: |
           cd frontend
           echo "audit frontend"
           npm install
           npm audit fix --audit-level=critical
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1           
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: scan Back-end
          command: |
           cd backend
           echo "audit backend"
           npm install
           npm audit fix --audit-level=critical
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1           
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            echo "deploy backend infra"
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udaPeople-backend-Superpower-ss1j287dhjppmz1593 \
              --stack-name "udapeople-backend-ss1j287dhjppmz1593" \
              --parameter-overrides ID="ss1j287dhjppmz1593"
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            echo "deploy frontend infra"
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udaPeople-frontend-Superpower-ss1j287dhjppmz1593 \
              --stack-name "udapeople-frontend-ss1j287dhjppmz1593" \
              --parameter-overrides ID="ss1j287dhjppmz1593"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "build inventory file"
            cat inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udaPeople-frontend-Superpower-ss1j287dhjppmz1593" \
              --output text >> inventory.txt
      - run:
          name: Programmatically save the new back-end url 
          command: |
            host=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udaPeople-backend-Superpower" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: 4f000549-cc4c-493a-af35-aefc582cfcb2" --request PUT --data "http://$host:3030" https://api.memstash.io/values/udaPeople-backend-url             
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ss1j287dhjppmz1593
          when: on_fail  

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c8:16:7a:e1:45:5a:43:b0:a5:3a:7a:13:e4:a2:06:19"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
          id: ss1j287dhjppmz1593
          when: on_fail      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]