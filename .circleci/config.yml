version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string    
    steps:
      - run:
          name: Destroy backend Infra
          when: on_fail          
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
      - run:
          name: Destroy frontend Infra
          when: on_fail          
          command: |
            aws s3 rb s3://udapeople-<< parameters.id >> --force           
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request GET https://api.memstash.io/values/migration_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
            
jobs:

  install-backend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules


  install-frontend-dependencies:
   docker:
      - image: circleci/node:13.8.0
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
           echo "building frontend"
           pwd
           npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: << pipeline.id >>-frontend-build
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .         
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
           echo "building backend"
           pwd
           npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: << pipeline.id >>-backend-build
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1   
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist
         

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: test front-end
          working_directory: ./frontend
          command: |
           pwd
           echo "testing frontend"
           npm run test
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1                           
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: test Back-end
          working_directory: ./backend          
          command: |
           pwd
           echo "testing backend"
           npm run test           
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - restore_cache:
          keys: [<< pipeline.id >>-frontend-build]
      - run:
          name: scan front-end
          command: |
           cd frontend
           echo "audit frontend"
           npm install
           npm audit fix --audit-level=critical
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1           
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]
      - run:
          name: scan Back-end
          command: |
           cd backend
           echo "audit backend"
           npm install
           npm audit fix --audit-level=critical
      - slack/notify:
          channel: awsprojects
          event: fail
          template: basic_fail_1           
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            echo "deploy backend infra"
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udaPeople-backend-Superpower-${CIRCLE_WORKFLOW_ID} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" 
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            echo "deploy frontend infra"
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udaPeople-frontend-Superpower-${CIRCLE_WORKFLOW_ID} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
            aws s3api list-buckets --query "Buckets[].Name"   
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            echo "build inventory file"
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udaPeople-backend-Superpower-${CIRCLE_WORKFLOW_ID}" \
              --output text >> inventory.txt
            cat inventory.txt
            pwd
      - run:
          name: Programmatically save the new back-end url 
          command: |
            host=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udaPeople-backend-Superpower-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            echo "${host}"
            curl --write-out "%{http_code}\n" -H "Content-Type: text/plain" -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request PUT --data "http://$host:3030" https://api.memstash.io/values/udaPeople-backend-url
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt              
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail  

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f6:35:9d:5c:15:81:f8:b2:c4:85:a1:da:81:36:36:ce"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail                

  run-migrations:
    docker:
      - image: python:3.7-alpine3.11
    steps:       
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]         
      - run:
          name: Install dependencies
          command: |
              apk add --update ansible tar gzip ansible nodejs npm curl typescript
              pip install awscli
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            echo "-------create env file------"
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            ls -latr
            cat .env
            echo "-------exit env file------"
            echo "INSTALLING NPM MODULE DEPENDENCIES"
            npm i > npminstall.log
            echo "INSTALLING OATH-SIGN PACKAGE"
            npm install oauth-sign >> npminstall.log
            
            echo "HOST: " $TYPEORM_HOST
            echo "PWD: " $(pwd)
            echo $TYPEORM_DATABASE
            echo "-------npm migrations revert , if in case its already done------"
            npm run migrations:revert
             echo "-------npm migrations begin------"
            npm install
            npm run premigrations
            npm run migrations > migration.txt
            MIGRATION_LOG=/root/project/backend/migration.txt
            if test -f "$MIGRATION_LOG"; then
                echo "$MIGRATION_LOG exists."
            fi
            echo "-----Output of the migration log----"
            cat migration.txt

      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
              MIGRATION_LOG=/root/project/backend/migration.txt
              if test -f "$MIGRATION_LOG"; then
                  echo "$MIGRATION_LOG exists."
              fi
              if grep -q "has been executed successfully" $MIGRATION_LOG; then
                echo "Migration - Success"               
                curl -H "Content-Type: text/plain" -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request PUT \
                  --data "success" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              else
                echo "Migration - failure"
                curl -H "Content-Type: text/plain" -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request PUT \
                  --data "failure" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
                exit 1
              fi
              echo "WorkflowID=${CIRCLE_WORKFLOW_ID}"
      - run:
          name: migration smoke test.
          working_directory: ./backend          
          command: |
            export migration-status-check=$(curl -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo "${migration-status-check}"              
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID}" 
          when: on_fail 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail                        

  deploy-frontend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - attach_workspace:
          at: .    
      - run:
          name: Install dependencies
          command: |
            apk add --update curl npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export API_URL=$(curl -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request GET https://api.memstash.io/values/udaPeople-backend-url)
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend          
          command: |
            npm install
            npm run build   
            cd dist
            ls -lrt| wc -l
            aws s3 cp . s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
            echo "deployed frontend"  
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist            
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail   
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID}" 
          when: on_fail     

  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f6:35:9d:5c:15:81:f8:b2:c4:85:a1:da:81:36:36:ce"]
      - attach_workspace:
          at: .      
      - run:
          name: Install dependencies
          working_directory: /tmp          
          command: |
            apk add --update ansible curl openssh nodejs npm rsync
            pip install awscli
      - restore_cache:
          keys: [<< pipeline.id >>-backend-build]         
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            pwd
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail    
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID}" 
          when: on_fail     
          

  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - attach_workspace:
          at: .      
      - run:
          name: Install dependencies
          working_directory: /tmp          
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend          
          command: |
            export API_URL=$(curl -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request GET https://api.memstash.io/values/udaPeople-backend-url)
            echo "${API_URL}/api/status"
      - run:
          name: Frontend smoke test.
          working_directory: ./backend          
          command: |
            export UI_URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.us-west-1.amazonaws.com/index.html"
            echo "${UI_URL}"
            curl -s ${UI_URL} | grep -q "Welcome"
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID}" 
          when: on_fail 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail    
          
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: 9a087c8d-59a3-475a-a1a1-915a0bf3c376" --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID
            echo "old workflow id ${OldWorkflowID}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udaPeople-cloudfront-Superpower-${CIRCLE_WORKFLOW_ID} \
              --stack-name "udaPeople-cloudfront-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"   
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID}" 
          when: on_fail 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail            
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Clean up old environment
          command: |
            
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 

            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID}
            echo  "OldWorkflowID ${OldWorkflowID}"
            echo  "CurrentWorkflowID ${CurrentWorkflowID}"
            if [[ "${STACKS[@]}" =~ "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive              
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udaPeople-cloudfront-${OldWorkflowID}"
            else
              echo "cleanup not required"
            fi
          environment:
            TERM: xterm-256color
workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-backend:
          requires:
            - install-backend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:          
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]